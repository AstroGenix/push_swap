[ Bubble Sort ]
Advantages:
	• It is simple to understand and implement.
	• It is useful fr small datasets.
	• It is a stable sorting algorithm, meaning that it preserves
		the order of equal elements.
Disadvantages:
	• It is inefficient for large datasets.
	• It has a worst-case time complexity f O(n^2), meaning that its
		performance degrades rapidly as the size of array grows.
	• It performs poorly with nearly sorted arrays.

- - - Code Snippet

#include <stdio.h>
#include <stdbool.h>

void	bubbleSort(int *arr, int size)
{
	int	i;
	int	j;
	int	temp;
	bool swapped = true;

	i = 0;
	while (i < size - 1 && swapped)
	{
		swapped = false;
		j = 0;
		while (j < size - i - 1)
		{
			if (arr[j] > arr[j + 1])
			{
				temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
				swapped = true;
			}
			j++;
		}
		i++;
	}
}

int main(void)
{
    int size = 10;
    int arr[] = {5,4,6,3,7,2,8,1,9,0};
    printf("Not sorted Array\n[");
    int i = 0;
    while (size != 0)
    {
        printf(" %d ", arr[i]);
        size--;
        i++;
    }
    printf("]\n\n");
    
    size = 10;
    bubbleSort(arr, size);
    printf("Sorted Array\n[");
    i = 0;
    while (size != 0)
    {
        printf(" %d ", arr[i]);
        size--;
        i++;
    }
    printf("]");
    return 0;
}