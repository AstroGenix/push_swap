[ Quick Sort ]
Advantages:
	• It is an efficient sorting algorithm, with an average time
		complexity of O(nlogn).
	• It is an in-place sorting algorithm, meaning it does not
		require any additional memory for sorting.
	• It has a faster worst-case scenario compared to other efficient
		sorting algrithms like Merge sort.
Disadvantages:
	• It has a worst-case time complexity of O(n^2) when the pivot
		element is chosen poorly.
	• It is not stable, meaning it does not guarantee the order of
		equal elements.
	• It is not suitabale fr large datasets or ones with lots of
		duplicate elements.

- - - Code Snippet

#include <stdio.h>

void	swap(int *a, int *b)
{
	int temp;

	temp = *a;
	*a = *b;
	*b = temp;
}

int	partition(int arr[], int low, int high)
{
	int	pivot = arr[high];
	int	i = low - 1;
	int	j = low;

	while (j < high)
	{
		if (arr[j] <= pivot)
		{
			i++;
			swap(&arr[i], &arr[j]);
		}
		j++;
	}
	swap(&arr[i+1], &arr[high]);
	return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
	int	pivotIndex;
	if (low < high)
	{
		pivotIndex = partition(arr, low, high);
		quickSort(arr, low, pivotIndex - 1);
		quickSort(arr, pivotIndex + 1, high);
	}
}

int main()
{
    int size = 10;
    int	arr[] = {5,4,6,3,7,2,8,1,9,0};
	int	n = sizeof(arr)/sizeof(arr[0]);
    printf("Not sorted Array\n[");
    int i = 0;
    while (size != 0)
    {
        printf(" %d ", arr[i]);
        size--;
        i++;
    }
    printf("]\n\n");
    
    size = 10;
    quickSort(arr, 0, n-1);
    printf("Sorted Array\n[");
    i = 0;
    while (size != 0)
    {
        printf(" %d ", arr[i]);
        size--;
        i++;
    }
    printf("]");
    return 0;
}